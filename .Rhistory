library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?par
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
library(ggplot2)
update.packages(checkBuilt=TRUE, ask=FALSE)
library(plyr)
library(ggplot2)
library("plyr")
?pbinom
pbinom(6, size=5, prob=.5)
pbinom(6, size=5, prob=.5, lower.tail = FALSE)
pbinom(4, size=5, prob=.5, lower.tail = FALSE)
pbinom(3, size=5, prob=.5, lower.tail = FALSE)
x <- ppois(16, 15^16)
x
x <- ppois(16, 15*16)
x
poisson.test(100, 15)
ppois(5, 15)
ppois(10, 15)
library(nlme)
library(ggplot2)
library(plyr)
library(scales)
#setwd("C:\\Users\\Chris\\Google Drive\\fheads_reporting\\r-analysis")
#t <- read.table("slice.csv", sep=";", header=TRUE, quote="")
#t <- read.table("stg_hq_transactionentry-March-10-15.csv", sep=";", header=TRUE, quote="")
t <- read.table("c:/tmp/trans.tsv", sep="\t", header=TRUE, quote="", comment.char="")
datetime <- strptime(factor(t$TransactionTime),  format = "%Y-%m-%d %H:%M:%S")
t <- cbind(t, datetime)
store_date <- as.Date(t$datetime)
t <- cbind(t, store_date)
total_sale = t$Price * t$Quantity
t <- cbind(t, total_sale)
month_num <- as.numeric(format(t$datetime, "%m"))
t <- cbind(t, month_num)
day_of_week <- weekdays(t$store_date)
t <- cbind(t, day_of_week)
day_of_week_num <- as.POSIXlt(t$store_date)$wday
t <- cbind(t, day_of_week_num)
dom <- as.POSIXlt(t$store_date)$mday
t <- cbind(t, dom)
hour <- as.numeric(format(t$datetime, "%H"))
t <- cbind(t, hour)
year <- as.numeric(format(t$datetime, "%Y"))
t <- cbind(t, year)
doy <- as.numeric(format(t$datetime, "%j"))
t <- cbind(t, doy)
year_month <- paste(t$year, "-", t$month_num, sep="")
t <- cbind(t, year_month)
month_from_open <- as.numeric(t$month_num) + (t$year - 2012)*12
t <- cbind(t, month_from_open)
t <- t[complete.cases(t),]
# sales by year and department
prod_totals <- aggregate(cbind(total_sale) ~ year + dept_name, sum, data = t)
#ggplot(prod_totals, aes(x=dept_name, y=total_sale)) + geom_bar(stat="identity") + coord_flip() + facet_wrap(~ year)
ggplot(prod_totals, aes(x=year, y=total_sale)) + geom_line() + facet_wrap(~ dept_name) + scale_y_continuous(labels=comma)
t <- read.table("c:/tmp/trans.tsv", sep="\t", header=TRUE, quote="", comment.char="")
datetime <- strptime(factor(t$TransactionTime),  format = "%Y-%m-%d %H:%M:%S")
t <- cbind(t, datetime)
store_date <- as.Date(t$datetime)
t <- cbind(t, store_date)
total_sale = t$Price * t$Quantity - t$SalesTax
t <- cbind(t, total_sale)
month_num <- as.numeric(format(t$datetime, "%m"))
t <- cbind(t, month_num)
day_of_week <- weekdays(t$store_date)
t <- cbind(t, day_of_week)
day_of_week_num <- as.POSIXlt(t$store_date)$wday
t <- cbind(t, day_of_week_num)
dom <- as.POSIXlt(t$store_date)$mday
t <- cbind(t, dom)
hour <- as.numeric(format(t$datetime, "%H"))
t <- cbind(t, hour)
year <- as.numeric(format(t$datetime, "%Y"))
t <- cbind(t, year)
doy <- as.numeric(format(t$datetime, "%j"))
t <- cbind(t, doy)
year_month <- paste(t$year, "-", t$month_num, sep="")
t <- cbind(t, year_month)
month_from_open <- as.numeric(t$month_num) + (t$year - 2012)*12
t <- cbind(t, month_from_open)
t <- t[complete.cases(t),]
# months since 2012
mfo_totals <- aggregate(cbind(total_sale) ~ month_from_open + dept_name, sum, data = t)
ggplot(mfo_totals, aes(x=month_from_open, y=total_sale)) + geom_point() + facet_wrap(~ dept_name) + scale_y_continuous(labels=comma) + geom_smooth(method="lm") + scale_x_continuous(breaks=seq(0,100,12))
# months since 2012
month_totals <- aggregate(total_sale ~ month_num + dept_name, sum, data = t)
dept_averages <-aggregate(total_sale ~ dept_name, data = month_totals, mean)
# add average
dept_average <- sapply(month_totals$dept_name, function(x) dept_averages[dept_averages$dept_name == x, 2])
month_totals <- cbind(month_totals, dept_average)
diff_from_avg <- 100*(month_totals$total_sale - month_totals$dept_average)/month_totals$dept_average
month_totals <- cbind(month_totals, diff_from_avg)
ggplot(month_totals, aes(x=month_num, y=total_sale)) +
geom_point() +
facet_wrap(~ dept_name) +
scale_y_continuous(labels=comma) +
scale_x_continuous(breaks=seq(0,12,1)) +
geom_line(stat="hline", yintercept=mean, linetype="dashed", col="red")
# months since 2012
month_totals <- aggregate(total_sale ~ month_num + dept_name, sum, data = t)
dept_averages <-aggregate(total_sale ~ dept_name, data = month_totals, mean)
# add average
dept_average <- sapply(month_totals$dept_name, function(x) dept_averages[dept_averages$dept_name == x, 2])
month_totals <- cbind(month_totals, dept_average)
diff_from_avg <- 100*(month_totals$total_sale - month_totals$dept_average)/month_totals$dept_average
month_totals <- cbind(month_totals, diff_from_avg)
ggplot(month_totals, aes(x=month_num, y=total_sale)) +
geom_point() +
facet_wrap(~ dept_name) +
scale_y_continuous(labels=comma) +
scale_x_continuous(breaks=seq(0,12,1)) +
geom_line(y=mean, linetype="dashed", col="red")
ggplot(month_totals, aes(x=month_num, y=total_sale)) +
geom_point() +
facet_wrap(~ dept_name) +
scale_y_continuous(labels=comma) +
scale_x_continuous(breaks=seq(0,12,1))
ggplot(month_totals, aes(x=month_num, y=total_sale)) +
geom_point() +
facet_wrap(~ dept_name) +
scale_y_continuous(labels=comma) +
scale_x_continuous(breaks=seq(0,12,1)) +
geom_line(y=mean,linetype="dashed", col="red")
?geom_line
ggplot(month_totals, aes(x=month_num, y=total_sale)) +
geom_point() +
facet_wrap(~ dept_name) +
scale_y_continuous(labels=comma) +
scale_x_continuous(breaks=seq(0,12,1)) +
geom_line(stat="identity", y=mean,linetype="dashed", col="red")
ggplot(month_totals, aes(x=month_num, y=total_sale)) +
geom_point() +
facet_wrap(~ dept_name) +
scale_y_continuous(labels=comma) +
scale_x_continuous(breaks=seq(0,12,1)) +
geom_line(y=mean(y),linetype="dashed", col="red")
ggplot(month_totals, aes(x=month_num, y=total_sale)) +
geom_point() +
facet_wrap(~ dept_name) +
scale_y_continuous(labels=comma) +
scale_x_continuous(breaks=seq(0,12,1)) +
geom_segment(aes(x = xbegin, xend = xend, y = average, yend = average, group = dept_name, colour = "red"))
ggplot(month_totals, aes(x=month_num, y=total_sale)) +
geom_point() +
facet_wrap(~ dept_name) +
scale_y_continuous(labels=comma) +
scale_x_continuous(breaks=seq(0,12,1)) +
stat_summary(fun.y = mean, geom="line")
ggplot(month_totals, aes(x=month_num, y=total_sale)) +
geom_point() +
facet_wrap(~ dept_name) +
scale_y_continuous(labels=comma) +
scale_x_continuous(breaks=seq(0,12,1))
month_avgs <- aggregate(total_sale ~ month_num + dept_name, mean, data = month_totals)
ggplot(month_avgs, aes(x=month_num, y=total_sale)) +
geom_point() +
facet_wrap(~ dept_name) +
scale_y_continuous(labels=comma) +
scale_x_continuous(breaks=seq(0,12,1))
c <- t[t$datetime > '2016-05-01',]
head(c)
c <- t[t$datetime >= '2016-05-01',]
nrow(c)
nrow(t)
t <- t[t$datetime < '2016-05-01',]
t <- read.table("c:/tmp/trans.tsv", sep="\t", header=TRUE, quote="", comment.char="")
datetime <- strptime(factor(t$TransactionTime),  format = "%Y-%m-%d %H:%M:%S")
t <- cbind(t, datetime)
store_date <- as.Date(t$datetime)
t <- cbind(t, store_date)
total_sale = t$Price * t$Quantity - t$SalesTax
t <- cbind(t, total_sale)
month_num <- as.numeric(format(t$datetime, "%m"))
t <- cbind(t, month_num)
day_of_week <- weekdays(t$store_date)
t <- cbind(t, day_of_week)
day_of_week_num <- as.POSIXlt(t$store_date)$wday
t <- cbind(t, day_of_week_num)
dom <- as.POSIXlt(t$store_date)$mday
t <- cbind(t, dom)
hour <- as.numeric(format(t$datetime, "%H"))
t <- cbind(t, hour)
year <- as.numeric(format(t$datetime, "%Y"))
t <- cbind(t, year)
doy <- as.numeric(format(t$datetime, "%j"))
t <- cbind(t, doy)
year_month <- paste(t$year, "-", t$month_num, sep="")
t <- cbind(t, year_month)
month_from_open <- as.numeric(t$month_num) + (t$year - 2012)*12
t <- cbind(t, month_from_open)
t <- t[complete.cases(t),]
#trim off the current unfinished month
t <- t[t$datetime < '2016-05-01',]
year_totals <- aggregate(cbind(total_sale) ~ year, sum, data = t)
ggplot(prod_totals, aes(x=year, y=total_sale)) + geom_line() + scale_y_continuous(labels=comma)
year_totals <- aggregate(cbind(total_sale) ~ year, sum, data = t)
ggplot(year_totals, aes(x=year, y=total_sale)) + geom_line() + scale_y_continuous(labels=comma)
fy <- t[t$datetime >= '2015-04-01' && t$datetime < '2016-04-01']
summary(fy)
fy <- t[t$datetime >= '2015-04-01' && t$datetime < '2016-04-01',]
summary(fy)
nrow(fy)
fy <- t[t$datetime >= '2015-04-01',]
nrow(fy)
fy <- t[(t$datetime >= '2015-04-01') && (t$datetime < '2016-04-01')),]
fy <- t[(t$datetime >= '2015-04-01') && (t$datetime < '2016-04-01'),]
nrow(fy)
fy <- t[t$datetime >= '2015-04-01',]
fy <- fy[fy$datetime < '2016-05-01',]
nrow(fy)
sum(fy$total_sale)
store_date_totals <- aggregate(total_sale ~ month_from_open + store_name, sum, data=t)
ggplot(store_date_totals, aes(x=month_from_open, y=total_sale, colour=store_name)) +
geom_line() +
scale_y_continuous(labels=comma)
library(nlme)
library(ggplot2)
library(plyr)
library(scales)
#setwd("C:\\Users\\Chris\\Google Drive\\fheads_reporting\\r-analysis")
#t <- read.table("slice.csv", sep=";", header=TRUE, quote="")
#t <- read.table("stg_hq_transactionentry-March-10-15.csv", sep=";", header=TRUE, quote="")
t <- read.table("c:/tmp/trans_w_tender.tsv", sep="\t", header=TRUE, quote="", comment.char="")
summary(t)
datetime <- strptime(factor(t$TransactionTime),  format = "%Y-%m-%d %H:%M:%S")
t <- cbind(t, datetime)
store_date <- as.Date(t$datetime)
t <- cbind(t, store_date)
total_sale = t$Price * t$Quantity - t$SalesTax
t <- cbind(t, total_sale)
month_num <- as.numeric(format(t$datetime, "%m"))
t <- cbind(t, month_num)
day_of_week <- weekdays(t$store_date)
t <- cbind(t, day_of_week)
day_of_week_num <- as.POSIXlt(t$store_date)$wday
t <- cbind(t, day_of_week_num)
dom <- as.POSIXlt(t$store_date)$mday
t <- cbind(t, dom)
hour <- as.numeric(format(t$datetime, "%H"))
t <- cbind(t, hour)
year <- as.numeric(format(t$datetime, "%Y"))
t <- cbind(t, year)
doy <- as.numeric(format(t$datetime, "%j"))
t <- cbind(t, doy)
year_month <- paste(t$year, "-", t$month_num, sep="")
t <- cbind(t, year_month)
month_from_open <- as.numeric(t$month_num) + (t$year - 2012)*12
t <- cbind(t, month_from_open)
t <- t[complete.cases(t),]
#trim off the current unfinished month
t <- t[t$datetime < '2016-05-01',]
mfo_totals <- aggregate(cbind(tenderamount) ~ month_from_open + tendertype, sum, data = t)
ggplot(mfo_totals, aes(x=month_from_open, y=tenderamount)) +
geom_point() +
facet_wrap(~ tenderamount) +
scale_y_continuous(labels=comma) +
geom_smooth(method="lm") +
scale_x_continuous(breaks=seq(0,100,12))
ggplot(mfo_totals, aes(x=month_from_open, y=tenderamount)) +
geom_point() +
facet_wrap(~ tendertype) +
scale_y_continuous(labels=comma) +
geom_smooth(method="lm") +
scale_x_continuous(breaks=seq(0,100,12))
nrows(t)
nrow(t)
summary(t)
str(t)
ta <- as.numeric(t$tenderamount)
str(ta)
t <- read.table("c:/tmp/trans_w_tender.tsv", sep="\t", header=TRUE, quote="", comment.char="")
datetime <- strptime(factor(t$TransactionTime),  format = "%Y-%m-%d %H:%M:%S")
t <- cbind(t, datetime)
store_date <- as.Date(t$datetime)
t <- cbind(t, store_date)
total_sale = t$Price * t$Quantity - t$SalesTax
t <- cbind(t, total_sale)
month_num <- as.numeric(format(t$datetime, "%m"))
t <- cbind(t, month_num)
day_of_week <- weekdays(t$store_date)
t <- cbind(t, day_of_week)
day_of_week_num <- as.POSIXlt(t$store_date)$wday
t <- cbind(t, day_of_week_num)
dom <- as.POSIXlt(t$store_date)$mday
t <- cbind(t, dom)
hour <- as.numeric(format(t$datetime, "%H"))
t <- cbind(t, hour)
year <- as.numeric(format(t$datetime, "%Y"))
t <- cbind(t, year)
doy <- as.numeric(format(t$datetime, "%j"))
t <- cbind(t, doy)
year_month <- paste(t$year, "-", t$month_num, sep="")
t <- cbind(t, year_month)
month_from_open <- as.numeric(t$month_num) + (t$year - 2012)*12
t <- cbind(t, month_from_open)
t$tenderamount <- as.numeric(t$tenderamount)
t <- t[complete.cases(t),]
#trim off the current unfinished month
t <- t[t$datetime < '2016-05-01',]
mfo_totals <- aggregate(cbind(tenderamount) ~ month_from_open + tendertype, sum, data = t)
ggplot(mfo_totals, aes(x=month_from_open, y=tenderamount)) +
geom_point() +
facet_wrap(~ tendertype) +
scale_y_continuous(labels=comma) +
geom_smooth(method="lm") +
scale_x_continuous(breaks=seq(0,100,12))
head(t$TransactionNumber)
head(t)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
libray(caret)
library(caret)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
str(training)
nrows(training)
nrow((training))
nrow(testing)
train_csv = "pml-training.csv"
test_csv = "pml-testing.csv"
set.seed(3921837)
init_training <- read.csv(train_csv)
final_testing <- read.csv(test_csv)
init_training[is.na(init_training)] <- 0
inTrain <- createDataPartition(y=init_training$classe,
p=0.75, list=FALSE)
training <- init_training[inTrain,]
testing <- init_training[-inTrain,]
setwd("C:\\rector\\git\\machinelearning")
train_csv = "pml-training.csv"
test_csv = "pml-testing.csv"
set.seed(3921837)
init_training <- read.csv(train_csv)
final_testing <- read.csv(test_csv)
init_training[is.na(init_training)] <- 0
inTrain <- createDataPartition(y=init_training$classe,
p=0.75, list=FALSE)
training <- init_training[inTrain,]
testing <- init_training[-inTrain,]
library(caret)
train_csv = "pml-training.csv"
test_csv = "pml-testing.csv"
set.seed(3921837)
init_training <- read.csv(train_csv)
final_testing <- read.csv(test_csv)
init_training[is.na(init_training)] <- 0
inTrain <- createDataPartition(y=init_training$classe,
p=0.75, list=FALSE)
training <- init_training[inTrain,]
testing <- init_training[-inTrain,]
modTreeBoot5 <- train(classe ~., method="rpart", data=x,
trControl=trainControl(method = "boot", number = 5))
x <- training[sample(training, 100),]
x <- training[sample(nrow(training), 100),]
modTreeBoot5 <- train(classe ~., method="rpart", data=x,
trControl=trainControl(method = "boot", number = 5))
modTreeBoot5
nrow(x)
modTreeCv5 <- train(classe ~., method="rpart", data=x,
trControl=trainControl(method = "cv", number = 5))
modTreeCv5
nrow(training)
nearZeroVar(training)
nsv <- nearZeroVar(training, saveMetrics = TRUE)
nsv
nzv_cols <- nearZeroVar(training)
training_trim <- training[, -nzv_cols]
ncol(training_trim)
ncol(training)
x <- training[sample(nrow(training_trim), 100),]
modTreeBoot5 <- train(classe ~., method="rpart", data=x, trControl=trainControl(method = "boot", number = 5))
x <- training_trim[sample(nrow(training_trim), 100),]
modTreeBoot5_trim <- train(classe ~., method="rpart", data=x, trControl=trainControl(method = "boot", number = 5))
modTreeBoot5_trim
modForestBoot5 <- train(classe ~., method="rf", data=x, trControl=trainControl(method = "boot", number = 5))
modForestBoot5
modForestCv5 <- train(classe ~., method="rf", data=x, trControl=trainControl(method = "cv", number = 5))
modForestCv5
modGbmBoot <- train(classe ~., method="gbm", data=x)
modGbmBoot <- train(classe ~., method="gbm", data=x, verbose=FALSE))
modGbmBoot <- train(classe ~., method="gbm", data=x, verbose=FALSE)
warnings()
modGbmBoot
modAdaBoot <- train(classe ~., method="ada", data=x, verbose=FALSE)
modAdaBoot <- train(classe ~., method="ada", data=x, verbose=FALSE)
warnings()
summary(x)
head(x)
warnings()
modMboost <- train(classe ~., method="mboost", data=x, verbose=FALSE)
modGamboost <- train(classe ~., method="gamBoost", data=x, verbose=FALSE)
install.packages("mboost")
install.packages("mboost")
modMboost <- train(classe ~., method="mboost", data=x, verbose=FALSE)
library(caret)
train_csv = "pml-training.csv"
test_csv = "pml-testing.csv"
set.seed(3921837)
init_training <- read.csv(train_csv)
final_testing <- read.csv(test_csv)
init_training[is.na(init_training)] <- 0
inTrain <- createDataPartition(y=init_training$classe,
p=0.75, list=FALSE)
training <- init_training[inTrain,]
testing <- init_training[-inTrain,]
nzv_cols <- nearZeroVar(training)
training_trim <- training[, -nzv_cols]
x <- training_trim[sample(nrow(training_trim), 100),]
modMboost <- train(classe ~., method="mboost", data=x, verbose=FALSE)
modGbm <- train(classe ~., method="gbm", data=x, verbose=FALSE)
warnings()
nearZeroVar(x, saveMetrics = TRUE)
x$cvtd_timestamp
y <- x[, -c("cvtd_timestamp")]
y <- x[, -c("cvtd_timestamp")]
y <- subset(x, -c(cvtd_timestamp)]
y <- subset(x, select=-c(cvtd_timestamp))
ncol(y)
ncol(x)
modGbm <- train(classe ~., method="gbm", data=y, verbose=FALSE)
modAda <- train(classe ~., method="ada", data=y, verbose=FALSE)
modGbm
x <- training_trim[sample(nrow(training_trim), 1000),]
x <- subset(x, select=-c(cvtd_timestamp))
modGbm <- train(classe ~., method="gbm", data=x, verbose=FALSE)
modGbm
modGbmBoot5 <- train(classe ~., method="gbm", data=x, verbose=FALSE,
trControl=trainControl(method = "boot", number = 5))
modGbmBoot5
modGbmBoot5 <- train(classe ~., method="gbm", data=x, verbose=FALSE,
trControl=trainControl(method = "cv", number = 5))
modGbmBoot5
modGbmCv5 <- train(classe ~., method="gbm", data=x, verbose=FALSE,
trControl=trainControl(method = "cv", number = 5))
modGbmCv5
modForestCv5 <- train(classe ~., method="rf", data=x, verbose=FALSE,
trControl=trainControl(method = "cv", number = 5))
modForestCv5
nrow(training)
modForestCv5 <- train(classe ~., method="rf", data=training_trim, verbose=FALSE,
trControl=trainControl(method = "cv", number = 5))
modForestCv5
library(randomForest)
modForestCv5$finalModel$
x
modForestCv5$finalModel
modForestCv5
modForestCv5$bestTune
modForestCv5$coefnames
modForestCv5$modelInfo
modForestCv5$results
modForestCv5$results
modTreeBoot5$bestTune
modTreeBoot5$results
modTreeBoot5$results[modTreeBoot5$bestTune,]
modTreeBoot5$results[modTreeBoot5$bestTune,2]
modTreeBoot5$results[,2]
max(modTreeBoot5$results[,2])
max(modForestBoot5$results[,2])
modTreeCv5 <- train(classe ~., method="rpart", data=x, trControl=trainControl(method = "cv", number = 5))
max(modTreeCv5$results[,2])
modGbmBoot5 <- train(classe ~., method="gbm", data=x, verbose=FALSE,
trControl=trainControl(method = "boot", number = 5))
max(modGbmBoot5$results[,2])
modGbmBoot5
modGbmBoot5$results
modGbmBoot5$results[,$Accuracy]
modGbmBoot5$results[,Accuracy]
modGbmBoot5$results[,"Accuracy""]
a
;
)
]
]
""
modGbmBoot5$results[,"Accuracy"]
max(modGbmBoot5$results[,"Accuracy"])
modTreeBoot5 <- train(classe ~., method="rpart", data=x, trControl=trainControl(method = "boot", number = 5))
max(modTreeBoot5$results[,"Accuracy"])
modTreeBoot5 <- train(classe ~., method="rpart", data=x, trControl=trainControl(method = "boot", number = 5))
max(modTreeBoot5$results[,"Accuracy"])
modTreeCv5 <- train(classe ~., method="rpart", data=x, trControl=trainControl(method = "cv", number = 5))
max(modTreeCv5$results[,"Accuracy"])
modGbmBoot5 <- train(classe ~., method="gbm", data=x, verbose=FALSE,
trControl=trainControl(method = "boot", number = 5))
max(modGbmBoot5$results[,"Accuracy"])
modForestCv5 <- train(classe ~., method="rf", data=x, verbose=FALSE,
trControl=trainControl(method = "cv", number = 5))
modForestCv5$results[,"Accuracy"])
max(modForestCv5$results[,"Accuracy"])
